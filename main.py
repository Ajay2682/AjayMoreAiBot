import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import random
import os
import openai

# тЬЕ OpenAI key рдбрд╛рд▓реЛ рдЕрдЧрд░ /talk рдореЗрдВ GPT рдЪрд╛рд╣рд┐рдП:
openai.api_key = os.getenv("OPENAI_API_KEY") or "sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"

# тЬЕ Shayari & Data (Demo)
shayari_list = [
    "рддреЗрд░реЗ рдмрд┐рдирд╛ рдЕрдзреВрд░реА рд╕реА рд▓рдЧрддреА рд╣реИ рдЬрд╝рд┐рдиреНрджрдЧреА тЭдя╕П",
    "рд╣рд░ рдкрд▓ рддреБрдЭрд╕реЗ рд╣реА рдкреНрдпрд╛рд░ рдХрд░рддреЗ рд╣реИрдВ ЁЯТЮ",
    "Attitude рд╣рдорд╛рд░рд╛ рдЦрддрд░рдирд╛рдХ рд╣реИ ЁЯШОЁЯФе"
]

captions_list = [
    "Smile. Sparkle. Shine тЬи",
    "Born to express, not to impress ЁЯТл",
    "Self-love is the best love тЭдя╕П"
]

bio_list = [
    "ЁЯУНDreamer | Believer | Achiever",
    "ЁЯТл Creating my own sunshine",
    "ЁЯЦд Life is short. Make it sweet."
]

story_list = [
    "рдПрдХ рдмрд╛рд░ рдПрдХ рд▓рдбрд╝рдХрд╛ рдерд╛ рдЬрд┐рд╕реЗ рд╕рдЪреНрдЪрд╛ рдкреНрдпрд╛рд░ рд╣реБрдЖ...",
    "рдЙрд╕реЗ рдЦреЛрдХрд░ рд╣реА рдореБрдЭреЗ рдЕрд╕рд▓реА рдкреНрдпрд╛рд░ рдХреА рдХрд╝реАрдордд рд╕рдордЭ рдЖрдИ...",
    "рдЙрд╕ рджрд┐рди рдмрд╛рд░рд┐рд╢ рд╣реЛ рд░рд╣реА рдереА, рдФрд░ рджрд┐рд▓ рднреА рд░реЛ рд░рд╣рд╛ рдерд╛..."
]

motivation_list = [
    "рдЬреЛ рд▓реЛрдЧ рдЦреБрдж рдкрд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдХрд░рддреЗ рд╣реИрдВ, рд╡рд╣реА рджреБрдирд┐рдпрд╛ рдмрджрд▓рддреЗ рд╣реИрдВ ЁЯТк",
    "рд╣рд░ рд╕реБрдмрд╣ рдПрдХ рдирдИ рд╢реБрд░реБрдЖрдд рд╣реИ ЁЯМЮ"
]

# ЁЯза GPT-style reply
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = " ".join(context.args)
    if not user_input:
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ рдХреБрдЫ рд▓рд┐рдЦрд┐рдП: `/talk рддреБрдо рдХреИрд╕реА рд╣реЛ?`")
        return
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_input}]
        )
        text = response['choices'][0]['message']['content']
        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"тЭМ GPT Error: {e}")

# ЁЯФе Command Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ЁЯСЛ рдирдорд╕реНрддреЗ! рдореИрдВ AjayMoreAi Bot рд╣реВрдБ!\n\nрдЖрдк рдпреЗ commands рднреЗрдЬ рд╕рдХрддреЗ рд╣реИрдВ:\n/shayari\n/caption\n/bio\n/hashtag\n/motivation\n/story\n/talk")

async def shayari(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(shayari_list))

async def caption(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(captions_list))

async def bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(bio_list))

async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(motivation_list))

async def story(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(story_list))

async def hashtag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("тЭМ рдЙрдкрдпреЛрдЧ: /hashtag love, attitude, selfie")
    else:
        topic = "_".join(args)
        hashtags = [f"#{topic}{i}" for i in range(1, 6)]
        await update.message.reply_text(" ".join(hashtags))

# ЁЯЫая╕П Main Application
def main():
    TOKEN = os.getenv("BOT_TOKEN") or "7638312232:AAFlLrMCApPVeihOB0MEm21wwqHTJThHn8Q"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("shayari", shayari))
    app.add_handler(CommandHandler("caption", caption))
    app.add_handler(CommandHandler("bio", bio))
    app.add_handler(CommandHandler("hashtag", hashtag))
    app.add_handler(CommandHandler("motivation", motivation))
    app.add_handler(CommandHandler("story", story))
    app.add_handler(CommandHandler("talk", talk))

    app.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
